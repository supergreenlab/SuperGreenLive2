#!/usr/bin/python3

# Note: needs simplejpeg to be installed (pip3 install simplejpeg).

import io
import logging
import socketserver
from argparse import ArgumentParser
from http import server
from threading import Condition

from picamera import PiCamera


class StreamingBuffer(io.BytesIO):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.frame = None
        self.condition = Condition()

    def write(self, buf: bytes):
        if buf.startswith(b"\xff\xd8"):
            self.truncate()
            with self.condition:
                self.frame = self.getvalue()
                self.condition.notify_all()
            self.seek(0)
        return super().write(buf)


class StreamingHandler(server.BaseHTTPRequestHandler):
    def __init__(self, buffer):
        self.buffer = buffer

    def __call__(self, *args, **kwargs):
        """Handle a request."""
        super().__init__(*args, **kwargs)

    def stream(self):
        try:
            while True:
                with self.buffer.condition:
                    self.buffer.condition.wait()
                    frame = self.buffer.frame
                self.wfile.write(b'--FRAME\r\n')
                self.send_header('Content-Type', 'image/jpeg')
                self.send_header('Content-Length', len(frame))
                self.end_headers()
                self.wfile.write(frame)
                self.wfile.write(b'\r\n')
        except Exception as e:
            logging.warning(
              'Removed streaming client %s: %s',
              self.client_address, str(e))

    def do_GET(self):
        print(self.path)
        if self.path == '/':
            self.send_response(301)
            self.send_header('Location', '/stream')
            self.end_headers()
        elif 'stream' in self.path:
            self.send_response(200)
            self.send_header('Age', 0)
            self.send_header('Cache-Control', 'no-cache, private')
            self.send_header('Pragma', 'no-cache')
            self.send_header('Content-Type', 'multipart/x-mixed-replace; boundary=FRAME')
            self.end_headers()
            self.stream()

        else:
            self.send_error(404)
            self.end_headers()


class StreamingServer(socketserver.ThreadingMixIn, server.HTTPServer):
    allow_reuse_address = True
    daemon_threads = True


class RaspiCamera:
    height = 1280
    width = 720
    hflip = 0
    vflip = 0
    buffer = None
    cam = None

    def __init__(self, buffer=None, height=None, width=None, hflip=None, vflip=None):
        if buffer is not None:
            self.buffer = buffer
        if height is not None:
            self.height = height
        if width is not None:
            self.width = width
        if hflip is not None:
            self.hflip = hflip
        if vflip is not None:
            self.vflip = vflip
        self.__setup_cam__()
        self.start()

    def __setup_cam__(self):
        self.cam = PiCamera()
        self.cam.framerate = 30
        self.cam.rotation = 0
        self.cam.resolution = (self.width, self.height)

    def start(self):
        self.cam.start_recording(self.buffer, format='mjpeg')

    def stop(self):
        self.cam.stop_recording()


def main():
    parser = ArgumentParser(description='Simple video streamer.')
    parser.add_argument('--hflip', type=int, default=None, help='rotate hflip (default: 0)')
    parser.add_argument('--vflip', type=int, default=None, help='rotate vflip (default: 0)')
    parser.add_argument('--width', type=int, default=None,
                        help='width of the video (default: 1280)')
    parser.add_argument('--height', type=int, default=None,
                        help='height of the video (default: 720)')
    parser.add_argument('--address', default='localhost',
                        help='bind address (default: localhost)')
    parser.add_argument('--port', type=int, default=8000,
                        help='bind port (default: 8000)')
    args = parser.parse_args()

    buffer = StreamingBuffer()
    cam = RaspiCamera(buffer=buffer,
                      height=args.height, width=args.width,
                      hflip=args.hflip, vflip=args.vflip)

    try:
        address = (args.address, args.port)
        server = StreamingServer(address, StreamingHandler(buffer))
        server.serve_forever()
    finally:
        cam.stop()


if __name__ == "__main__":
    main()
